{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from \"axios\";\n\nfunction usefetch(url) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    axios.get(url).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\n_s(usefetch, \"v5inua6mCP5CN8A+E7ULWpnNGvM=\");\n\nexport default usefetch;","map":{"version":3,"sources":["/Users/morgan/Documents/Token-App/Token-App/src/useFetch.js"],"names":["useEffect","useState","axios","usefetch","url","data","setData","loading","setLoading","error","setError","get","then","response","catch","err","finally"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,IAAAA,KAAK,CACJS,GADD,CACKP,GADL,EAECQ,IAFD,CAEOC,QAAD,IAAc;AAChBP,MAAAA,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;AACH,KAJD,EAKCS,KALD,CAKQC,GAAD,IAAS;AACZL,MAAAA,QAAQ,CAACK,GAAD,CAAR;AACH,KAPD,EAQCC,OARD,CAQS,MAAM;AACXR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAVD;AAWH,GAbQ,EAaN,CAACJ,GAAD,CAbM,CAAT;AAeA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AAEH;;GAtBQN,Q;;AAwBT,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from \"axios\";\n\nfunction usefetch(url) {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setLoading(true);\n        axios\n        .get(url)\n        .then((response) => {\n            setData(response.data);\n        })\n        .catch((err) => {\n            setError(err);\n        })\n        .finally(() => {\n            setLoading(false);\n        });\n    }, [url]);\n\n    return { data, loading, error };\n\n}\n\nexport default usefetch;\n"]},"metadata":{},"sourceType":"module"}